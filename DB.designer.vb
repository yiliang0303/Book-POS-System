'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DB")>  _
Partial Public Class DBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBookReturn(instance As BookReturn)
    End Sub
  Partial Private Sub UpdateBookReturn(instance As BookReturn)
    End Sub
  Partial Private Sub DeleteBookReturn(instance As BookReturn)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertTransaction(instance As Transaction)
    End Sub
  Partial Private Sub UpdateTransaction(instance As Transaction)
    End Sub
  Partial Private Sub DeleteTransaction(instance As Transaction)
    End Sub
  Partial Private Sub InsertTransactionDetail(instance As TransactionDetail)
    End Sub
  Partial Private Sub UpdateTransactionDetail(instance As TransactionDetail)
    End Sub
  Partial Private Sub DeleteTransactionDetail(instance As TransactionDetail)
    End Sub
  Partial Private Sub Insertcategory(instance As category)
    End Sub
  Partial Private Sub Updatecategory(instance As category)
    End Sub
  Partial Private Sub Deletecategory(instance As category)
    End Sub
  Partial Private Sub Insertbook(instance As book)
    End Sub
  Partial Private Sub Updatebook(instance As book)
    End Sub
  Partial Private Sub Deletebook(instance As book)
    End Sub
  Partial Private Sub InsertMember(instance As Member)
    End Sub
  Partial Private Sub UpdateMember(instance As Member)
    End Sub
  Partial Private Sub DeleteMember(instance As Member)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.BookPOS.My.MySettings.Default.DBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property BookReturns() As System.Data.Linq.Table(Of BookReturn)
		Get
			Return Me.GetTable(Of BookReturn)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property Transactions() As System.Data.Linq.Table(Of Transaction)
		Get
			Return Me.GetTable(Of Transaction)
		End Get
	End Property
	
	Public ReadOnly Property TransactionDetails() As System.Data.Linq.Table(Of TransactionDetail)
		Get
			Return Me.GetTable(Of TransactionDetail)
		End Get
	End Property
	
	Public ReadOnly Property categories() As System.Data.Linq.Table(Of category)
		Get
			Return Me.GetTable(Of category)
		End Get
	End Property
	
	Public ReadOnly Property books() As System.Data.Linq.Table(Of book)
		Get
			Return Me.GetTable(Of book)
		End Get
	End Property
	
	Public ReadOnly Property Members() As System.Data.Linq.Table(Of Member)
		Get
			Return Me.GetTable(Of Member)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BookReturn")>  _
Partial Public Class BookReturn
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Return_ID As String
	
	Private _Transaction_ID As String
	
	Private _Date As String
	
	Private _Qty As Integer
	
	Private _StaffID As String
	
	Private _remark As String
	
	Private _bookID As String
	
	Private _Staff As EntityRef(Of Staff)
	
	Private _Transaction As EntityRef(Of Transaction)
	
	Private _book As EntityRef(Of book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReturn_IDChanging(value As String)
    End Sub
    Partial Private Sub OnReturn_IDChanged()
    End Sub
    Partial Private Sub OnTransaction_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTransaction_IDChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As String)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnQtyChanging(value As Integer)
    End Sub
    Partial Private Sub OnQtyChanged()
    End Sub
    Partial Private Sub OnStaffIDChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIDChanged()
    End Sub
    Partial Private Sub OnremarkChanging(value As String)
    End Sub
    Partial Private Sub OnremarkChanged()
    End Sub
    Partial Private Sub OnbookIDChanging(value As String)
    End Sub
    Partial Private Sub OnbookIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Staff = CType(Nothing, EntityRef(Of Staff))
		Me._Transaction = CType(Nothing, EntityRef(Of Transaction))
		Me._book = CType(Nothing, EntityRef(Of book))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Return_ID", DbType:="Char(11) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Return_ID() As String
		Get
			Return Me._Return_ID
		End Get
		Set
			If (String.Equals(Me._Return_ID, value) = false) Then
				Me.OnReturn_IDChanging(value)
				Me.SendPropertyChanging
				Me._Return_ID = value
				Me.SendPropertyChanged("Return_ID")
				Me.OnReturn_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transaction_ID", DbType:="Char(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Transaction_ID() As String
		Get
			Return Me._Transaction_ID
		End Get
		Set
			If (String.Equals(Me._Transaction_ID, value) = false) Then
				If Me._Transaction.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTransaction_IDChanging(value)
				Me.SendPropertyChanging
				Me._Transaction_ID = value
				Me.SendPropertyChanged("Transaction_ID")
				Me.OnTransaction_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qty", DbType:="Int NOT NULL")>  _
	Public Property Qty() As Integer
		Get
			Return Me._Qty
		End Get
		Set
			If ((Me._Qty = value)  _
						= false) Then
				Me.OnQtyChanging(value)
				Me.SendPropertyChanging
				Me._Qty = value
				Me.SendPropertyChanged("Qty")
				Me.OnQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffID", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
	Public Property StaffID() As String
		Get
			Return Me._StaffID
		End Get
		Set
			If (String.Equals(Me._StaffID, value) = false) Then
				If Me._Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffIDChanging(value)
				Me.SendPropertyChanging
				Me._StaffID = value
				Me.SendPropertyChanged("StaffID")
				Me.OnStaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remark", DbType:="VarChar(300)")>  _
	Public Property remark() As String
		Get
			Return Me._remark
		End Get
		Set
			If (String.Equals(Me._remark, value) = false) Then
				Me.OnremarkChanging(value)
				Me.SendPropertyChanging
				Me._remark = value
				Me.SendPropertyChanged("remark")
				Me.OnremarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookID", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
	Public Property bookID() As String
		Get
			Return Me._bookID
		End Get
		Set
			If (String.Equals(Me._bookID, value) = false) Then
				If Me._book.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnbookIDChanging(value)
				Me.SendPropertyChanging
				Me._bookID = value
				Me.SendPropertyChanged("bookID")
				Me.OnbookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_BookReturn", Storage:="_Staff", ThisKey:="StaffID", OtherKey:="staffID", IsForeignKey:=true)>  _
	Public Property Staff() As Staff
		Get
			Return Me._Staff.Entity
		End Get
		Set
			Dim previousValue As Staff = Me._Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Staff.Entity = Nothing
					previousValue.BookReturns.Remove(Me)
				End If
				Me._Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BookReturns.Add(Me)
					Me._StaffID = value.staffID
				Else
					Me._StaffID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Staff")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Transaction_BookReturn", Storage:="_Transaction", ThisKey:="Transaction_ID", OtherKey:="Transaction_ID", IsForeignKey:=true)>  _
	Public Property Transaction() As Transaction
		Get
			Return Me._Transaction.Entity
		End Get
		Set
			Dim previousValue As Transaction = Me._Transaction.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Transaction.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Transaction.Entity = Nothing
					previousValue.BookReturns.Remove(Me)
				End If
				Me._Transaction.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BookReturns.Add(Me)
					Me._Transaction_ID = value.Transaction_ID
				Else
					Me._Transaction_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Transaction")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="book_BookReturn", Storage:="_book", ThisKey:="bookID", OtherKey:="bookID", IsForeignKey:=true)>  _
	Public Property book() As book
		Get
			Return Me._book.Entity
		End Get
		Set
			Dim previousValue As book = Me._book.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._book.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._book.Entity = Nothing
					previousValue.BookReturns.Remove(Me)
				End If
				Me._book.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BookReturns.Add(Me)
					Me._bookID = value.bookID
				Else
					Me._bookID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("book")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffID As String
	
	Private _sName As String
	
	Private _sUsername As String
	
	Private _sPassword As String
	
	Private _sIC As String
	
	Private _sEmail As String
	
	Private _sPhone As String
	
	Private _sAddress As String
	
	Private _sPosition As String
	
	Private _sImage As System.Data.Linq.Binary
	
	Private _BookReturns As EntitySet(Of BookReturn)
	
	Private _Transactions As EntitySet(Of Transaction)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As String)
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnsNameChanging(value As String)
    End Sub
    Partial Private Sub OnsNameChanged()
    End Sub
    Partial Private Sub OnsUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnsUsernameChanged()
    End Sub
    Partial Private Sub OnsPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnsPasswordChanged()
    End Sub
    Partial Private Sub OnsICChanging(value As String)
    End Sub
    Partial Private Sub OnsICChanged()
    End Sub
    Partial Private Sub OnsEmailChanging(value As String)
    End Sub
    Partial Private Sub OnsEmailChanged()
    End Sub
    Partial Private Sub OnsPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnsPhoneChanged()
    End Sub
    Partial Private Sub OnsAddressChanging(value As String)
    End Sub
    Partial Private Sub OnsAddressChanged()
    End Sub
    Partial Private Sub OnsPositionChanging(value As String)
    End Sub
    Partial Private Sub OnsPositionChanged()
    End Sub
    Partial Private Sub OnsImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnsImageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BookReturns = New EntitySet(Of BookReturn)(AddressOf Me.attach_BookReturns, AddressOf Me.detach_BookReturns)
		Me._Transactions = New EntitySet(Of Transaction)(AddressOf Me.attach_Transactions, AddressOf Me.detach_Transactions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", DbType:="Char(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property staffID() As String
		Get
			Return Me._staffID
		End Get
		Set
			If (String.Equals(Me._staffID, value) = false) Then
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sName() As String
		Get
			Return Me._sName
		End Get
		Set
			If (String.Equals(Me._sName, value) = false) Then
				Me.OnsNameChanging(value)
				Me.SendPropertyChanging
				Me._sName = value
				Me.SendPropertyChanged("sName")
				Me.OnsNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sUsername", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sUsername() As String
		Get
			Return Me._sUsername
		End Get
		Set
			If (String.Equals(Me._sUsername, value) = false) Then
				Me.OnsUsernameChanging(value)
				Me.SendPropertyChanging
				Me._sUsername = value
				Me.SendPropertyChanged("sUsername")
				Me.OnsUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPassword", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPassword() As String
		Get
			Return Me._sPassword
		End Get
		Set
			If (String.Equals(Me._sPassword, value) = false) Then
				Me.OnsPasswordChanging(value)
				Me.SendPropertyChanging
				Me._sPassword = value
				Me.SendPropertyChanged("sPassword")
				Me.OnsPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sIC", DbType:="Char(12) NOT NULL", CanBeNull:=false)>  _
	Public Property sIC() As String
		Get
			Return Me._sIC
		End Get
		Set
			If (String.Equals(Me._sIC, value) = false) Then
				Me.OnsICChanging(value)
				Me.SendPropertyChanging
				Me._sIC = value
				Me.SendPropertyChanged("sIC")
				Me.OnsICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sEmail", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sEmail() As String
		Get
			Return Me._sEmail
		End Get
		Set
			If (String.Equals(Me._sEmail, value) = false) Then
				Me.OnsEmailChanging(value)
				Me.SendPropertyChanging
				Me._sEmail = value
				Me.SendPropertyChanged("sEmail")
				Me.OnsEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPhone", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property sPhone() As String
		Get
			Return Me._sPhone
		End Get
		Set
			If (String.Equals(Me._sPhone, value) = false) Then
				Me.OnsPhoneChanging(value)
				Me.SendPropertyChanging
				Me._sPhone = value
				Me.SendPropertyChanged("sPhone")
				Me.OnsPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property sAddress() As String
		Get
			Return Me._sAddress
		End Get
		Set
			If (String.Equals(Me._sAddress, value) = false) Then
				Me.OnsAddressChanging(value)
				Me.SendPropertyChanging
				Me._sAddress = value
				Me.SendPropertyChanged("sAddress")
				Me.OnsAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPosition", DbType:="Char(5) NOT NULL", CanBeNull:=false)>  _
	Public Property sPosition() As String
		Get
			Return Me._sPosition
		End Get
		Set
			If (String.Equals(Me._sPosition, value) = false) Then
				Me.OnsPositionChanging(value)
				Me.SendPropertyChanging
				Me._sPosition = value
				Me.SendPropertyChanged("sPosition")
				Me.OnsPositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property sImage() As System.Data.Linq.Binary
		Get
			Return Me._sImage
		End Get
		Set
			If (Object.Equals(Me._sImage, value) = false) Then
				Me.OnsImageChanging(value)
				Me.SendPropertyChanging
				Me._sImage = value
				Me.SendPropertyChanged("sImage")
				Me.OnsImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_BookReturn", Storage:="_BookReturns", ThisKey:="staffID", OtherKey:="StaffID")>  _
	Public Property BookReturns() As EntitySet(Of BookReturn)
		Get
			Return Me._BookReturns
		End Get
		Set
			Me._BookReturns.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Transaction", Storage:="_Transactions", ThisKey:="staffID", OtherKey:="StaffID")>  _
	Public Property Transactions() As EntitySet(Of Transaction)
		Get
			Return Me._Transactions
		End Get
		Set
			Me._Transactions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BookReturns(ByVal entity As BookReturn)
		Me.SendPropertyChanging
		entity.Staff = Me
	End Sub
	
	Private Sub detach_BookReturns(ByVal entity As BookReturn)
		Me.SendPropertyChanging
		entity.Staff = Nothing
	End Sub
	
	Private Sub attach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Staff = Me
	End Sub
	
	Private Sub detach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Staff = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Transaction]")>  _
Partial Public Class Transaction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Transaction_ID As String
	
	Private _Date As String
	
	Private _PaymentMethod As String
	
	Private _Status As String
	
	Private _MemberID As String
	
	Private _StaffID As String
	
	Private _BookReturns As EntitySet(Of BookReturn)
	
	Private _TransactionDetails As EntitySet(Of TransactionDetail)
	
	Private _Staff As EntityRef(Of Staff)
	
	Private _Member As EntityRef(Of Member)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTransaction_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTransaction_IDChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As String)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnPaymentMethodChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentMethodChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnMemberIDChanging(value As String)
    End Sub
    Partial Private Sub OnMemberIDChanged()
    End Sub
    Partial Private Sub OnStaffIDChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BookReturns = New EntitySet(Of BookReturn)(AddressOf Me.attach_BookReturns, AddressOf Me.detach_BookReturns)
		Me._TransactionDetails = New EntitySet(Of TransactionDetail)(AddressOf Me.attach_TransactionDetails, AddressOf Me.detach_TransactionDetails)
		Me._Staff = CType(Nothing, EntityRef(Of Staff))
		Me._Member = CType(Nothing, EntityRef(Of Member))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transaction_ID", DbType:="Char(11) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Transaction_ID() As String
		Get
			Return Me._Transaction_ID
		End Get
		Set
			If (String.Equals(Me._Transaction_ID, value) = false) Then
				Me.OnTransaction_IDChanging(value)
				Me.SendPropertyChanging
				Me._Transaction_ID = value
				Me.SendPropertyChanged("Transaction_ID")
				Me.OnTransaction_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="VarChar(30)")>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethod", DbType:="VarChar(20)")>  _
	Public Property PaymentMethod() As String
		Get
			Return Me._PaymentMethod
		End Get
		Set
			If (String.Equals(Me._PaymentMethod, value) = false) Then
				Me.OnPaymentMethodChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMethod = value
				Me.SendPropertyChanged("PaymentMethod")
				Me.OnPaymentMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(6) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberID", DbType:="Char(8)")>  _
	Public Property MemberID() As String
		Get
			Return Me._MemberID
		End Get
		Set
			If (String.Equals(Me._MemberID, value) = false) Then
				If Me._Member.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMemberIDChanging(value)
				Me.SendPropertyChanging
				Me._MemberID = value
				Me.SendPropertyChanged("MemberID")
				Me.OnMemberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffID", DbType:="Char(8)")>  _
	Public Property StaffID() As String
		Get
			Return Me._StaffID
		End Get
		Set
			If (String.Equals(Me._StaffID, value) = false) Then
				If Me._Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffIDChanging(value)
				Me.SendPropertyChanging
				Me._StaffID = value
				Me.SendPropertyChanged("StaffID")
				Me.OnStaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Transaction_BookReturn", Storage:="_BookReturns", ThisKey:="Transaction_ID", OtherKey:="Transaction_ID")>  _
	Public Property BookReturns() As EntitySet(Of BookReturn)
		Get
			Return Me._BookReturns
		End Get
		Set
			Me._BookReturns.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Transaction_TransactionDetail", Storage:="_TransactionDetails", ThisKey:="Transaction_ID", OtherKey:="Transaction_ID")>  _
	Public Property TransactionDetails() As EntitySet(Of TransactionDetail)
		Get
			Return Me._TransactionDetails
		End Get
		Set
			Me._TransactionDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Transaction", Storage:="_Staff", ThisKey:="StaffID", OtherKey:="staffID", IsForeignKey:=true)>  _
	Public Property Staff() As Staff
		Get
			Return Me._Staff.Entity
		End Get
		Set
			Dim previousValue As Staff = Me._Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Staff.Entity = Nothing
					previousValue.Transactions.Remove(Me)
				End If
				Me._Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transactions.Add(Me)
					Me._StaffID = value.staffID
				Else
					Me._StaffID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Staff")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Member_Transaction", Storage:="_Member", ThisKey:="MemberID", OtherKey:="memberID", IsForeignKey:=true)>  _
	Public Property Member() As Member
		Get
			Return Me._Member.Entity
		End Get
		Set
			Dim previousValue As Member = Me._Member.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Member.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Member.Entity = Nothing
					previousValue.Transactions.Remove(Me)
				End If
				Me._Member.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transactions.Add(Me)
					Me._MemberID = value.memberID
				Else
					Me._MemberID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Member")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BookReturns(ByVal entity As BookReturn)
		Me.SendPropertyChanging
		entity.Transaction = Me
	End Sub
	
	Private Sub detach_BookReturns(ByVal entity As BookReturn)
		Me.SendPropertyChanging
		entity.Transaction = Nothing
	End Sub
	
	Private Sub attach_TransactionDetails(ByVal entity As TransactionDetail)
		Me.SendPropertyChanging
		entity.Transaction = Me
	End Sub
	
	Private Sub detach_TransactionDetails(ByVal entity As TransactionDetail)
		Me.SendPropertyChanging
		entity.Transaction = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TransactionDetail")>  _
Partial Public Class TransactionDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _qty As Integer
	
	Private _BookID As String
	
	Private _TransactionDetail_ID As String
	
	Private _Transaction_ID As String
	
	Private _Transaction As EntityRef(Of Transaction)
	
	Private _book As EntityRef(Of book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnqtyChanging(value As Integer)
    End Sub
    Partial Private Sub OnqtyChanged()
    End Sub
    Partial Private Sub OnBookIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    Partial Private Sub OnTransactionDetail_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionDetail_IDChanged()
    End Sub
    Partial Private Sub OnTransaction_IDChanging(value As String)
    End Sub
    Partial Private Sub OnTransaction_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Transaction = CType(Nothing, EntityRef(Of Transaction))
		Me._book = CType(Nothing, EntityRef(Of book))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="Int NOT NULL")>  _
	Public Property qty() As Integer
		Get
			Return Me._qty
		End Get
		Set
			If ((Me._qty = value)  _
						= false) Then
				Me.OnqtyChanging(value)
				Me.SendPropertyChanging
				Me._qty = value
				Me.SendPropertyChanged("qty")
				Me.OnqtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
	Public Property BookID() As String
		Get
			Return Me._BookID
		End Get
		Set
			If (String.Equals(Me._BookID, value) = false) Then
				If Me._book.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDetail_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property TransactionDetail_ID() As String
		Get
			Return Me._TransactionDetail_ID
		End Get
		Set
			If (String.Equals(Me._TransactionDetail_ID, value) = false) Then
				Me.OnTransactionDetail_IDChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDetail_ID = value
				Me.SendPropertyChanged("TransactionDetail_ID")
				Me.OnTransactionDetail_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transaction_ID", DbType:="Char(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Transaction_ID() As String
		Get
			Return Me._Transaction_ID
		End Get
		Set
			If (String.Equals(Me._Transaction_ID, value) = false) Then
				If Me._Transaction.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTransaction_IDChanging(value)
				Me.SendPropertyChanging
				Me._Transaction_ID = value
				Me.SendPropertyChanged("Transaction_ID")
				Me.OnTransaction_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Transaction_TransactionDetail", Storage:="_Transaction", ThisKey:="Transaction_ID", OtherKey:="Transaction_ID", IsForeignKey:=true)>  _
	Public Property Transaction() As Transaction
		Get
			Return Me._Transaction.Entity
		End Get
		Set
			Dim previousValue As Transaction = Me._Transaction.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Transaction.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Transaction.Entity = Nothing
					previousValue.TransactionDetails.Remove(Me)
				End If
				Me._Transaction.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TransactionDetails.Add(Me)
					Me._Transaction_ID = value.Transaction_ID
				Else
					Me._Transaction_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Transaction")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="book_TransactionDetail", Storage:="_book", ThisKey:="BookID", OtherKey:="bookID", IsForeignKey:=true)>  _
	Public Property book() As book
		Get
			Return Me._book.Entity
		End Get
		Set
			Dim previousValue As book = Me._book.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._book.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._book.Entity = Nothing
					previousValue.TransactionDetails.Remove(Me)
				End If
				Me._book.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TransactionDetails.Add(Me)
					Me._BookID = value.bookID
				Else
					Me._BookID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("book")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.category")>  _
Partial Public Class category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _categoryID As String
	
	Private _categoryName As String
	
	Private _books As EntitySet(Of book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncategoryIDChanging(value As String)
    End Sub
    Partial Private Sub OncategoryIDChanged()
    End Sub
    Partial Private Sub OncategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OncategoryNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._books = New EntitySet(Of book)(AddressOf Me.attach_books, AddressOf Me.detach_books)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryID", DbType:="Char(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property categoryID() As String
		Get
			Return Me._categoryID
		End Get
		Set
			If (String.Equals(Me._categoryID, value) = false) Then
				Me.OncategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._categoryID = value
				Me.SendPropertyChanged("categoryID")
				Me.OncategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property categoryName() As String
		Get
			Return Me._categoryName
		End Get
		Set
			If (String.Equals(Me._categoryName, value) = false) Then
				Me.OncategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._categoryName = value
				Me.SendPropertyChanged("categoryName")
				Me.OncategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="category_book", Storage:="_books", ThisKey:="categoryID", OtherKey:="categoryID")>  _
	Public Property books() As EntitySet(Of book)
		Get
			Return Me._books
		End Get
		Set
			Me._books.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_books(ByVal entity As book)
		Me.SendPropertyChanging
		entity.category = Me
	End Sub
	
	Private Sub detach_books(ByVal entity As book)
		Me.SendPropertyChanging
		entity.category = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.book")>  _
Partial Public Class book
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bookID As String
	
	Private _bookTitle As String
	
	Private _price As Decimal
	
	Private _quantity As Integer
	
	Private _picture As String
	
	Private _publishDate As System.Nullable(Of Date)
	
	Private _authorName As String
	
	Private _categoryID As String
	
	Private _language As String
	
	Private _status As Boolean
	
	Private _BookReturns As EntitySet(Of BookReturn)
	
	Private _TransactionDetails As EntitySet(Of TransactionDetail)
	
	Private _category As EntityRef(Of category)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbookIDChanging(value As String)
    End Sub
    Partial Private Sub OnbookIDChanged()
    End Sub
    Partial Private Sub OnbookTitleChanging(value As String)
    End Sub
    Partial Private Sub OnbookTitleChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnpictureChanging(value As String)
    End Sub
    Partial Private Sub OnpictureChanged()
    End Sub
    Partial Private Sub OnpublishDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnpublishDateChanged()
    End Sub
    Partial Private Sub OnauthorNameChanging(value As String)
    End Sub
    Partial Private Sub OnauthorNameChanged()
    End Sub
    Partial Private Sub OncategoryIDChanging(value As String)
    End Sub
    Partial Private Sub OncategoryIDChanged()
    End Sub
    Partial Private Sub OnlanguageChanging(value As String)
    End Sub
    Partial Private Sub OnlanguageChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BookReturns = New EntitySet(Of BookReturn)(AddressOf Me.attach_BookReturns, AddressOf Me.detach_BookReturns)
		Me._TransactionDetails = New EntitySet(Of TransactionDetail)(AddressOf Me.attach_TransactionDetails, AddressOf Me.detach_TransactionDetails)
		Me._category = CType(Nothing, EntityRef(Of category))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookID", DbType:="Char(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property bookID() As String
		Get
			Return Me._bookID
		End Get
		Set
			If (String.Equals(Me._bookID, value) = false) Then
				Me.OnbookIDChanging(value)
				Me.SendPropertyChanging
				Me._bookID = value
				Me.SendPropertyChanged("bookID")
				Me.OnbookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookTitle", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property bookTitle() As String
		Get
			Return Me._bookTitle
		End Get
		Set
			If (String.Equals(Me._bookTitle, value) = false) Then
				Me.OnbookTitleChanging(value)
				Me.SendPropertyChanging
				Me._bookTitle = value
				Me.SendPropertyChanged("bookTitle")
				Me.OnbookTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Money NOT NULL")>  _
	Public Property price() As Decimal
		Get
			Return Me._price
		End Get
		Set
			If ((Me._price = value)  _
						= false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int NOT NULL")>  _
	Public Property quantity() As Integer
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_picture", DbType:="VarChar(500)")>  _
	Public Property picture() As String
		Get
			Return Me._picture
		End Get
		Set
			If (String.Equals(Me._picture, value) = false) Then
				Me.OnpictureChanging(value)
				Me.SendPropertyChanging
				Me._picture = value
				Me.SendPropertyChanged("picture")
				Me.OnpictureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_publishDate", DbType:="Date")>  _
	Public Property publishDate() As System.Nullable(Of Date)
		Get
			Return Me._publishDate
		End Get
		Set
			If (Me._publishDate.Equals(value) = false) Then
				Me.OnpublishDateChanging(value)
				Me.SendPropertyChanging
				Me._publishDate = value
				Me.SendPropertyChanged("publishDate")
				Me.OnpublishDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_authorName", DbType:="VarChar(50)")>  _
	Public Property authorName() As String
		Get
			Return Me._authorName
		End Get
		Set
			If (String.Equals(Me._authorName, value) = false) Then
				Me.OnauthorNameChanging(value)
				Me.SendPropertyChanging
				Me._authorName = value
				Me.SendPropertyChanged("authorName")
				Me.OnauthorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryID", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
	Public Property categoryID() As String
		Get
			Return Me._categoryID
		End Get
		Set
			If (String.Equals(Me._categoryID, value) = false) Then
				If Me._category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._categoryID = value
				Me.SendPropertyChanged("categoryID")
				Me.OncategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_language", DbType:="VarChar(50)")>  _
	Public Property language() As String
		Get
			Return Me._language
		End Get
		Set
			If (String.Equals(Me._language, value) = false) Then
				Me.OnlanguageChanging(value)
				Me.SendPropertyChanging
				Me._language = value
				Me.SendPropertyChanged("language")
				Me.OnlanguageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="Bit NOT NULL")>  _
	Public Property status() As Boolean
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="book_BookReturn", Storage:="_BookReturns", ThisKey:="bookID", OtherKey:="bookID")>  _
	Public Property BookReturns() As EntitySet(Of BookReturn)
		Get
			Return Me._BookReturns
		End Get
		Set
			Me._BookReturns.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="book_TransactionDetail", Storage:="_TransactionDetails", ThisKey:="bookID", OtherKey:="BookID")>  _
	Public Property TransactionDetails() As EntitySet(Of TransactionDetail)
		Get
			Return Me._TransactionDetails
		End Get
		Set
			Me._TransactionDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="category_book", Storage:="_category", ThisKey:="categoryID", OtherKey:="categoryID", IsForeignKey:=true)>  _
	Public Property category() As category
		Get
			Return Me._category.Entity
		End Get
		Set
			Dim previousValue As category = Me._category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._category.Entity = Nothing
					previousValue.books.Remove(Me)
				End If
				Me._category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.books.Add(Me)
					Me._categoryID = value.categoryID
				Else
					Me._categoryID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("category")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BookReturns(ByVal entity As BookReturn)
		Me.SendPropertyChanging
		entity.book = Me
	End Sub
	
	Private Sub detach_BookReturns(ByVal entity As BookReturn)
		Me.SendPropertyChanging
		entity.book = Nothing
	End Sub
	
	Private Sub attach_TransactionDetails(ByVal entity As TransactionDetail)
		Me.SendPropertyChanging
		entity.book = Me
	End Sub
	
	Private Sub detach_TransactionDetails(ByVal entity As TransactionDetail)
		Me.SendPropertyChanging
		entity.book = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Member")>  _
Partial Public Class Member
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _memberID As String
	
	Private _mPoint As System.Nullable(Of Integer)
	
	Private _mRate As System.Nullable(Of Double)
	
	Private _mLevel As String
	
	Private _mName As String
	
	Private _mAddress As String
	
	Private _mIC As String
	
	Private _mPhoneNo As String
	
	Private _mUsername As String
	
	Private _mEmail As String
	
	Private _mPassword As String
	
	Private _Transactions As EntitySet(Of Transaction)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmemberIDChanging(value As String)
    End Sub
    Partial Private Sub OnmemberIDChanged()
    End Sub
    Partial Private Sub OnmPointChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmPointChanged()
    End Sub
    Partial Private Sub OnmRateChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnmRateChanged()
    End Sub
    Partial Private Sub OnmLevelChanging(value As String)
    End Sub
    Partial Private Sub OnmLevelChanged()
    End Sub
    Partial Private Sub OnmNameChanging(value As String)
    End Sub
    Partial Private Sub OnmNameChanged()
    End Sub
    Partial Private Sub OnmAddressChanging(value As String)
    End Sub
    Partial Private Sub OnmAddressChanged()
    End Sub
    Partial Private Sub OnmICChanging(value As String)
    End Sub
    Partial Private Sub OnmICChanged()
    End Sub
    Partial Private Sub OnmPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnmPhoneNoChanged()
    End Sub
    Partial Private Sub OnmUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnmUsernameChanged()
    End Sub
    Partial Private Sub OnmEmailChanging(value As String)
    End Sub
    Partial Private Sub OnmEmailChanged()
    End Sub
    Partial Private Sub OnmPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnmPasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Transactions = New EntitySet(Of Transaction)(AddressOf Me.attach_Transactions, AddressOf Me.detach_Transactions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_memberID", DbType:="Char(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property memberID() As String
		Get
			Return Me._memberID
		End Get
		Set
			If (String.Equals(Me._memberID, value) = false) Then
				Me.OnmemberIDChanging(value)
				Me.SendPropertyChanging
				Me._memberID = value
				Me.SendPropertyChanged("memberID")
				Me.OnmemberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mPoint", DbType:="Int")>  _
	Public Property mPoint() As System.Nullable(Of Integer)
		Get
			Return Me._mPoint
		End Get
		Set
			If (Me._mPoint.Equals(value) = false) Then
				Me.OnmPointChanging(value)
				Me.SendPropertyChanging
				Me._mPoint = value
				Me.SendPropertyChanged("mPoint")
				Me.OnmPointChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mRate", DbType:="Float")>  _
	Public Property mRate() As System.Nullable(Of Double)
		Get
			Return Me._mRate
		End Get
		Set
			If (Me._mRate.Equals(value) = false) Then
				Me.OnmRateChanging(value)
				Me.SendPropertyChanging
				Me._mRate = value
				Me.SendPropertyChanged("mRate")
				Me.OnmRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mLevel", DbType:="VarChar(9)")>  _
	Public Property mLevel() As String
		Get
			Return Me._mLevel
		End Get
		Set
			If (String.Equals(Me._mLevel, value) = false) Then
				Me.OnmLevelChanging(value)
				Me.SendPropertyChanging
				Me._mLevel = value
				Me.SendPropertyChanged("mLevel")
				Me.OnmLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mName() As String
		Get
			Return Me._mName
		End Get
		Set
			If (String.Equals(Me._mName, value) = false) Then
				Me.OnmNameChanging(value)
				Me.SendPropertyChanging
				Me._mName = value
				Me.SendPropertyChanged("mName")
				Me.OnmNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property mAddress() As String
		Get
			Return Me._mAddress
		End Get
		Set
			If (String.Equals(Me._mAddress, value) = false) Then
				Me.OnmAddressChanging(value)
				Me.SendPropertyChanging
				Me._mAddress = value
				Me.SendPropertyChanged("mAddress")
				Me.OnmAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mIC", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property mIC() As String
		Get
			Return Me._mIC
		End Get
		Set
			If (String.Equals(Me._mIC, value) = false) Then
				Me.OnmICChanging(value)
				Me.SendPropertyChanging
				Me._mIC = value
				Me.SendPropertyChanged("mIC")
				Me.OnmICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mPhoneNo", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property mPhoneNo() As String
		Get
			Return Me._mPhoneNo
		End Get
		Set
			If (String.Equals(Me._mPhoneNo, value) = false) Then
				Me.OnmPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._mPhoneNo = value
				Me.SendPropertyChanged("mPhoneNo")
				Me.OnmPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mUsername", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property mUsername() As String
		Get
			Return Me._mUsername
		End Get
		Set
			If (String.Equals(Me._mUsername, value) = false) Then
				Me.OnmUsernameChanging(value)
				Me.SendPropertyChanging
				Me._mUsername = value
				Me.SendPropertyChanged("mUsername")
				Me.OnmUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mEmail", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mEmail() As String
		Get
			Return Me._mEmail
		End Get
		Set
			If (String.Equals(Me._mEmail, value) = false) Then
				Me.OnmEmailChanging(value)
				Me.SendPropertyChanging
				Me._mEmail = value
				Me.SendPropertyChanged("mEmail")
				Me.OnmEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mPassword", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property mPassword() As String
		Get
			Return Me._mPassword
		End Get
		Set
			If (String.Equals(Me._mPassword, value) = false) Then
				Me.OnmPasswordChanging(value)
				Me.SendPropertyChanging
				Me._mPassword = value
				Me.SendPropertyChanged("mPassword")
				Me.OnmPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Member_Transaction", Storage:="_Transactions", ThisKey:="memberID", OtherKey:="MemberID")>  _
	Public Property Transactions() As EntitySet(Of Transaction)
		Get
			Return Me._Transactions
		End Get
		Set
			Me._Transactions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Member = Me
	End Sub
	
	Private Sub detach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Member = Nothing
	End Sub
End Class
